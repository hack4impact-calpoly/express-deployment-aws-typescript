name: 'Express Deployment AWS Typescript'
description: 'Automatically deploy an Express app to API Gateway/Lambda'

inputs:
  s3-bucket:
    description: 's3 bucket to store builds'
    required: true
  stack-name:
    description: 'Cloud Formation stack name'
    required: true

outputs:
  api-url:
    description: 'URL of the API'
    value: ${{ steps.get-url.outputs.api-url }}

runs:
  using: "composite"
  steps:
    - name: Install project dependencies
      working-directory: backend
      run: npm install
      shell: bash

    - name: Declare env variables
      run: printenv > ./backend/.env # hacky, but should hold
      shell: bash

    - name: Copy action configuration files
      run: cp ${{ github.action_path }}/lambda.js  ${{ github.action_path }}/webpack.config.js ${{ github.action_path }}/sam-template.yaml .
      shell: bash

    - name: Install ts-loader
      run: npm install ts-loader
      shell: bash

    - name: Install webpack dependancies
      run: npm install webpack@^5.27.1 webpack-cli@^4.5.0 source-map-support@^0.5.19 dotenv-webpack@^7.0.2 @vendia/serverless-express@^4.8.0
      shell: bash

    - name: Compile backend
      run: npx webpack-cli
      shell: bash

    - name: Create bucket
      run: (aws s3api get-bucket-location --bucket ${{ inputs.s3-bucket }} || aws s3 mb s3://${{ inputs.s3-bucket }})
      shell: bash

    - name: Package backend
      run: aws cloudformation package --template ./sam-template.yaml --s3-bucket ${{ inputs.s3-bucket }} --output-template sam-template.packaged.yaml
      shell: bash

    - name: Deploy backend
      run: aws cloudformation deploy --template-file sam-template.packaged.yaml --stack-name ${{ inputs.stack-name }} --capabilities CAPABILITY_IAM
      shell: bash

    - id: get-url
      run: |
        url=$(aws cloudformation describe-stacks --stack-name ${{ inputs.stack-name }} --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
        echo "::set-output name=api-url::$(echo $url)"
      shell: bash
